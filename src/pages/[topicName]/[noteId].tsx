import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Header } from "~/components/Header";
import MarkdownContent from "~/components/MarkdownContent";
import Spinner from "~/components/Spinner";
import { api } from "~/utils/api";
import { formatDate } from "~/utils/formatDate";

const NoteDetail = () => {
  const router = useRouter();
  const { data: sessionData, status } = useSession();
  const [deletingNote, setDeletingNote] = useState(false);

  const { data: note, isLoading: loadingNote } = api.note.getNote.useQuery(
    {
      noteId: (router.query.noteId as string) ?? "",
    },
    {
      enabled: sessionData?.user !== undefined,
      onError: (err) => {
        if (err.data?.httpStatus === 403) {
          router.push("/");
        }
      },
    }
  );

  const deleteNote = api.note.delete.useMutation();

  const handleDeleteNote = async (noteId: string) => {
    try {
      setDeletingNote(true);
      await deleteNote.mutateAsync({ noteId });
      router.push("/");
    } catch (err) {
      console.log(err);
    }

    setDeletingNote(false);
  };

  useEffect(() => {
    if (note === null) {
      router.push("/");
    }
  }, [note]);

  useEffect(() => {
    if (status !== "loading" && !sessionData) {
      router.push("/");
    }
  }, [sessionData]);

  const meta = {
    title: !note ? "Note Taker" : `${router.query.topicName} | ${note?.title}`,
  };

  return (
    <>
      <Head>
        <title>{meta.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />

        <div className="mx-auto w-full max-w-2xl p-4">
          {loadingNote && <Spinner />}
          {!loadingNote && note && (
            <div>
              <div className="mb-8 flex items-center justify-between">
                <Link
                  href="/"
                  className="inline-block text-gray-300 underline hover:text-gray-400"
                >
                  Go back
                </Link>

                <div className="flex items-center space-x-4">
                  <button className="text-gray-300 underline hover:text-gray-400">
                    Edit
                  </button>
                  <button
                    onClick={() => handleDeleteNote(note.id)}
                    className="text-gray-300 underline hover:text-gray-400"
                  >
                    {deletingNote ? "Deleting" : "Delete"}
                  </button>
                </div>
              </div>

              <h1 className="mb-2 text-2xl font-bold">{note.title}</h1>

              <p className="mb-6 text-sm text-gray-400">
                {formatDate(note.createdAt)}
              </p>

              <div className="prose w-full max-w-full">
                <MarkdownContent content={note.content} />
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default NoteDetail;

// http://localhost:3000/zwel/clg84ing50001dm5wlr8ugt76
